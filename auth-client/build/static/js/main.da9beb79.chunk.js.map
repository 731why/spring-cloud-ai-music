{"version":3,"sources":["util/ApiUtil.js","signin/Signin.js","signup/Signup.js","App.js","serviceWorker.js","index.js"],"names":["request","options","headers","Headers","setContentType","append","localStorage","getItem","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","Signin","props","useState","loading","setLoading","className","ThunderboltTwoTone","style","fontSize","name","initialValues","remember","onFinish","values","loginRequest","method","body","JSON","stringify","setItem","accessToken","window","location","href","catch","error","status","notification","message","description","Item","rules","required","size","prefix","UserOutlined","placeholder","LockOutlined","type","shape","htmlType","Signup","useEffect","signupRequest","success","history","push","App","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.da9beb79.chunk.js","sourcesContent":["const request = (options) => {\r\n  const headers = new Headers();\r\n\r\n  if (options.setContentType !== false) {\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  }\r\n\r\n  if (localStorage.getItem(\"accessToken\")) {\r\n    headers.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + localStorage.getItem(\"accessToken\")\r\n    );\r\n  }\r\n\r\n  const defaults = { headers: headers };\r\n  options = Object.assign({}, defaults, options);\r\n\r\n  return fetch(options.url, options).then((response) =>\r\n    response.json().then((json) => {\r\n      if (!response.ok) {\r\n        return Promise.reject(json);\r\n      }\r\n      return json;\r\n    })\r\n  );\r\n};\r\n\r\nexport function login(loginRequest) {\r\n  return request({\r\n    url: \"/api/user/signin\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(loginRequest),\r\n  });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n  return request({\r\n    url: \"/api/user/signup\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(signupRequest),\r\n  });\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  ThunderboltTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport { login } from \"../util/ApiUtil\";\r\nimport \"./Signin.css\";\r\n\r\n\r\nconst Signin = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onFinish = (values) => {\r\n    setLoading(true);\r\n    login(values)\r\n      .then((response) => {\r\n        localStorage.setItem(\"accessToken\", response.accessToken);\r\n        window.location.href = '/';\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        if (error.status === 401) {\r\n          notification.error({\r\n            message: \"Error\",\r\n            description: \"用户名或密码错误，请重试!\",\r\n          });\r\n        } else {\r\n          notification.error({\r\n            message: \"Error\",\r\n            description:\r\n              error.message || \"抱歉! 登录错误. 请稍后重试!\",\r\n          });\r\n        }\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <ThunderboltTwoTone style={{ fontSize: 50 }} />\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"请输入用户名!\" }]}\r\n        >\r\n          <Input\r\n            size=\"large\"\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"用户名\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"请输入密码!\" }]}\r\n        >\r\n          <Input\r\n            size=\"large\"\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"密码\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            loading={loading}\r\n          >\r\n            登录\r\n          </Button>\r\n        </Form.Item>\r\n        未注册? <a href=\"/signup\">注册</a>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nimport { ThunderboltTwoTone } from \"@ant-design/icons\";\r\nimport { signup } from \"../util/ApiUtil\";\r\nimport \"./Signup.css\";\r\n\r\nconst Signup = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"accessToken\") !== null) {\r\n      window.location.href = '/';\r\n    }\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    setLoading(true);\r\n    signup(values)\r\n      .then((response) => {\r\n        notification.success({\r\n          message: \"Success\",\r\n          description:\r\n            \"感谢使用! 您已成功注册. 请登录使用!\",\r\n        });\r\n        props.history.push(\"/signin\");\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Error\",\r\n          description:\r\n            error.message || \"抱歉! 注册错误. 请稍后重试!\",\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <ThunderboltTwoTone style={{ fontSize: 50 }} />\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"请输入用户名!\" }]}\r\n        >\r\n          <Input size=\"large\" placeholder=\"用户名\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"email\"\r\n          rules={[{ required: true, message: \"请输入邮箱!\" }]}\r\n        >\r\n          <Input size=\"large\" placeholder=\"邮箱\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"请输入密码!\" }]}\r\n        >\r\n          <Input size=\"large\" type=\"password\" placeholder=\"密码\" />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n            loading={loading}\r\n          >\r\n            注册\r\n          </Button>\r\n        </Form.Item>\r\n        已注册? <a href=\"/signin\">登录</a>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Signin from \"./signin/Signin\";\r\nimport Signup from \"./signup/Signup\";\r\nimport \"./App.css\";\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/signin\"\r\n            render={(props) => <Signin {...props} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/signup\"\r\n            render={(props) => <Signup {...props} />}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}